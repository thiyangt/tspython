[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lab Manual: DSA 554 3.0 Spatio-temporal Data Analysis",
    "section": "",
    "text": "Preface\nThis lab manual has beenwritten to serve as your companion in learning and mastering the time series analysis, spatial analysis and Spatio-temporal analysis with Python.\nThis book is written based on Quarto using the RStudio IDE. The content is reproducible. To reproduce the work use the following steps\n\nInstall R and RStudio\nInstall Python\nInstall jupyter using commander"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Time Series Analysis",
    "section": "",
    "text": "2 Set Year column to index\nHere observation is referred to as measurements. Yeargives what times those numbers were recorded. It is known as index column."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "intro.html#time-series-wrangling",
    "href": "intro.html#time-series-wrangling",
    "title": "1  Time Series Analysis",
    "section": "1.1 Time Series Wrangling",
    "text": "1.1 Time Series Wrangling\n\n1.1.1 Creating Frequency Columns\nInstall the required packages using the following commands. If you are using RStudio IDE type the commands on the Terminal according to the following format\n$ python -m pip install pandas\n$ python -m pip install plotnine\n\nOtherwise, you can use the following format\nimport sys\n\n!{sys.executable} -m pip install [package_name]\n\nSimilarly install and load the following libraries\n\nimport pandas as pd\nfrom pandas import *\nimport numpy as np\nimport plotnine as p9\nfrom plotnine import *\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime\nfrom datetime import *\n\n\n\n1.1.2 Annual Data\nFirst , I create a simple pandas data frame.\n\n# Creating a pandas DataFrame\ndata = {'Year': list(range(2015, 2020)),\n        'Observation': [123, 39, 78, 52, 110]}\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\nYear\nObservation\n\n\n\n\n0\n2015\n123\n\n\n1\n2016\n39\n\n\n2\n2017\n78\n\n\n3\n2018\n52\n\n\n4\n2019\n110\n\n\n\n\n\n\n\nNow, let’s check the data types of the variables in the above data frame.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   Year         5 non-null      int64\n 1   Observation  5 non-null      int64\ndtypes: int64(2)\nmemory usage: 212.0 bytes\n\n\n\n(ggplot(df, aes(\"Year\", \"Observation\"))\n + geom_point() + geom_line())\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\ndf['Year'] = pd.to_datetime(df['Year'], format='%Y')\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Year         5 non-null      datetime64[ns]\n 1   Observation  5 non-null      int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 212.0 bytes\n\n\n\n(ggplot(df, aes(\"Year\", \"Observation\"))\n + geom_point() + geom_line() + \n   scale_x_datetime(breaks='1 year',  date_labels='%Y'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\n1.1.3 Quarterly\n\nstart_date = '2015-01-01'\nend_date = '2020-12-31'\n\nquarterly_dates = pd.date_range(start=start_date, end=end_date, freq='Q')\nprint(\"Quarterly Dates:\")\nprint(quarterly_dates)\n\nQuarterly Dates:\nDatetimeIndex(['2015-03-31', '2015-06-30', '2015-09-30', '2015-12-31',\n               '2016-03-31', '2016-06-30', '2016-09-30', '2016-12-31',\n               '2017-03-31', '2017-06-30', '2017-09-30', '2017-12-31',\n               '2018-03-31', '2018-06-30', '2018-09-30', '2018-12-31',\n               '2019-03-31', '2019-06-30', '2019-09-30', '2019-12-31',\n               '2020-03-31', '2020-06-30', '2020-09-30', '2020-12-31'],\n              dtype='datetime64[ns]', freq='Q-DEC')\n\n\n\n\n\n\n\n\n\n1.1.4 Monthly data\nExample\n\n# Generate a date range for the desired time period\ndate_range = pd.date_range(start='2020-01-01', end='2021-12-31', freq='M')\nmonthly_observation_df = pd.DataFrame()\n# Add the date range and a randomly generated 'Observation' column\nmonthly_observation_df['Month'] = date_range\nnp.random.seed(42)  # Setting seed for reproducibility\nmonthly_observation_df['Observation'] = np.random.randint(24, 150, size=len(date_range))\n\n# Displaying the resulting DataFrame\nprint(\"Monthly Observation DataFrame:\")\nprint(monthly_observation_df)\nmonthly_observation_df.info()\n\nMonthly Observation DataFrame:\n        Month  Observation\n0  2020-01-31          126\n1  2020-02-29           75\n2  2020-03-31          116\n3  2020-04-30           38\n4  2020-05-31          130\n5  2020-06-30           95\n6  2020-07-31           84\n7  2020-08-31           44\n8  2020-09-30          126\n9  2020-10-31          145\n10 2020-11-30          106\n11 2020-12-31          110\n12 2021-01-31           98\n13 2021-02-28           98\n14 2021-03-31          111\n15 2021-04-30          140\n16 2021-05-31          123\n17 2021-06-30          127\n18 2021-07-31           47\n19 2021-08-31           26\n20 2021-09-30           45\n21 2021-10-31           76\n22 2021-11-30           25\n23 2021-12-31          111\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 24 entries, 0 to 23\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        24 non-null     datetime64[ns]\n 1   Observation  24 non-null     int32         \ndtypes: datetime64[ns](1), int32(1)\nmemory usage: 420.0 bytes\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        labs(title='Line Plot of Observation Over Time'))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%b %Y') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%Y-%m-%d') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%m %Y') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\n\n%Y: Year with century as a decimal number (e.g., 2023).\n%m: Month as a zero-padded decimal number (e.g., 01 for January).\n%d: Day of the month as a zero-padded decimal number (e.g., 07).\n\n\n\ndate_range = pd.date_range(start='2019-01-01', end='2019-05-31', freq='M')\ndf_monthly = pd.DataFrame()\n# Add the date range as a 'Month' column\ndf_monthly['Month'] = date_range\ndf_monthly['Observation'] = [50, 23, 34, 30, 25]\n\n# Display the resulting DataFrame\nprint(\"Monthly DataFrame:\")\nprint(df_monthly)\ndf_monthly.info()\nplot = (ggplot(df_monthly, aes(x='Month', y='Observation')) +\n        geom_line() +\n       labs(title='Line Plot of Observation Over Time') + \n       scale_x_datetime(breaks='1 month'))\nprint(plot)\n\nMonthly DataFrame:\n       Month  Observation\n0 2019-01-31           50\n1 2019-02-28           23\n2 2019-03-31           34\n3 2019-04-30           30\n4 2019-05-31           25\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        5 non-null      datetime64[ns]\n 1   Observation  5 non-null      int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 212.0 bytes\n\n\n\n\n\n\n\n\n\n\n1.1.5 Weekly\n\nstart_date = '2015-01-01'\nend_date = '2020-12-31'\n\nweekly_dates = pd.date_range(start=start_date, end=end_date, freq='W')\nprint(\"Weekly Dates:\")\nprint(weekly_dates)\n\nWeekly Dates:\nDatetimeIndex(['2015-01-04', '2015-01-11', '2015-01-18', '2015-01-25',\n               '2015-02-01', '2015-02-08', '2015-02-15', '2015-02-22',\n               '2015-03-01', '2015-03-08',\n               ...\n               '2020-10-25', '2020-11-01', '2020-11-08', '2020-11-15',\n               '2020-11-22', '2020-11-29', '2020-12-06', '2020-12-13',\n               '2020-12-20', '2020-12-27'],\n              dtype='datetime64[ns]', length=313, freq='W-SUN')\n\n\n\n\n\n1.1.6 Hourly\n\nstart_date = '2015-01-01 00:00:00'\nend_date = '2015-01-01 23:59:59'\n\nhourly_dates = pd.date_range(start=start_date, end=end_date, freq='H')\nprint(\"Hourly Dates:\")\nprint(hourly_dates)\n\nHourly Dates:\nDatetimeIndex(['2015-01-01 00:00:00', '2015-01-01 01:00:00',\n               '2015-01-01 02:00:00', '2015-01-01 03:00:00',\n               '2015-01-01 04:00:00', '2015-01-01 05:00:00',\n               '2015-01-01 06:00:00', '2015-01-01 07:00:00',\n               '2015-01-01 08:00:00', '2015-01-01 09:00:00',\n               '2015-01-01 10:00:00', '2015-01-01 11:00:00',\n               '2015-01-01 12:00:00', '2015-01-01 13:00:00',\n               '2015-01-01 14:00:00', '2015-01-01 15:00:00',\n               '2015-01-01 16:00:00', '2015-01-01 17:00:00',\n               '2015-01-01 18:00:00', '2015-01-01 19:00:00',\n               '2015-01-01 20:00:00', '2015-01-01 21:00:00',\n               '2015-01-01 22:00:00', '2015-01-01 23:00:00'],\n              dtype='datetime64[ns]', freq='H')"
  },
  {
    "objectID": "intro.html#creating-frequency-columns",
    "href": "intro.html#creating-frequency-columns",
    "title": "1  Time Series Wrangling",
    "section": "1.1 Creating Frequency Columns",
    "text": "1.1 Creating Frequency Columns\nInstall the required packages using the following commands. If you are using RStudio IDE type the commands on the Terminal according to the following format\n$ python -m pip install pandas\n$ python -m pip install plotnine\nOtherwise, you can use the following format\nimport sys\n\n!{sys.executable} -m pip install [package_name]\n\nSimilarly install and load the following libraries\n\nimport pandas as pd\nfrom pandas import *\nimport numpy as np\nimport plotnine as p9\nfrom plotnine import *\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime\nfrom datetime import *\n\n\n1.1.1 Annual Data\nFirst , I create a simple pandas data frame.\n\n# Creating a pandas DataFrame\ndata = {'Year': list(range(2015, 2020)),\n        'Observation': [123, 39, 78, 52, 110]}\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\nYear\nObservation\n\n\n\n\n0\n2015\n123\n\n\n1\n2016\n39\n\n\n2\n2017\n78\n\n\n3\n2018\n52\n\n\n4\n2019\n110\n\n\n\n\n\n\n\nNow, let’s check the data types of the variables in the above data frame.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   Year         5 non-null      int64\n 1   Observation  5 non-null      int64\ndtypes: int64(2)\nmemory usage: 212.0 bytes\n\n\n\n(ggplot(df, aes(\"Year\", \"Observation\"))\n + geom_point() + geom_line())\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\ndf['Year'] = pd.to_datetime(df['Year'], format='%Y')\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Year         5 non-null      datetime64[ns]\n 1   Observation  5 non-null      int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 212.0 bytes\n\n\n\n(ggplot(df, aes(\"Year\", \"Observation\"))\n + geom_point() + geom_line() + \n   scale_x_datetime(breaks='1 year',  date_labels='%Y'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\n1.1.2 Quarterly\n\nstart_date = '2015-01-01'\nend_date = '2020-12-31'\n\nquarterly_dates = pd.date_range(start=start_date, end=end_date, freq='Q')\nprint(\"Quarterly Dates:\")\nprint(quarterly_dates)\n\nQuarterly Dates:\nDatetimeIndex(['2015-03-31', '2015-06-30', '2015-09-30', '2015-12-31',\n               '2016-03-31', '2016-06-30', '2016-09-30', '2016-12-31',\n               '2017-03-31', '2017-06-30', '2017-09-30', '2017-12-31',\n               '2018-03-31', '2018-06-30', '2018-09-30', '2018-12-31',\n               '2019-03-31', '2019-06-30', '2019-09-30', '2019-12-31',\n               '2020-03-31', '2020-06-30', '2020-09-30', '2020-12-31'],\n              dtype='datetime64[ns]', freq='Q-DEC')\n\n\n\n\n\n\n\n\n\n1.1.3 Monthly data\nExample\n\n# Generate a date range for the desired time period\ndate_range = pd.date_range(start='2020-01-01', end='2021-12-31', freq='M')\nmonthly_observation_df = pd.DataFrame()\n# Add the date range and a randomly generated 'Observation' column\nmonthly_observation_df['Month'] = date_range\nnp.random.seed(42)  # Setting seed for reproducibility\nmonthly_observation_df['Observation'] = np.random.randint(24, 150, size=len(date_range))\n\n# Displaying the resulting DataFrame\nprint(\"Monthly Observation DataFrame:\")\nprint(monthly_observation_df)\nmonthly_observation_df.info()\n\nMonthly Observation DataFrame:\n        Month  Observation\n0  2020-01-31          126\n1  2020-02-29           75\n2  2020-03-31          116\n3  2020-04-30           38\n4  2020-05-31          130\n5  2020-06-30           95\n6  2020-07-31           84\n7  2020-08-31           44\n8  2020-09-30          126\n9  2020-10-31          145\n10 2020-11-30          106\n11 2020-12-31          110\n12 2021-01-31           98\n13 2021-02-28           98\n14 2021-03-31          111\n15 2021-04-30          140\n16 2021-05-31          123\n17 2021-06-30          127\n18 2021-07-31           47\n19 2021-08-31           26\n20 2021-09-30           45\n21 2021-10-31           76\n22 2021-11-30           25\n23 2021-12-31          111\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 24 entries, 0 to 23\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        24 non-null     datetime64[ns]\n 1   Observation  24 non-null     int32         \ndtypes: datetime64[ns](1), int32(1)\nmemory usage: 420.0 bytes\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        labs(title='Line Plot of Observation Over Time'))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%b %Y') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%Y-%m-%d') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%m %Y') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\n\n%Y: Year with century as a decimal number (e.g., 2023).\n%m: Month as a zero-padded decimal number (e.g., 01 for January).\n%d: Day of the month as a zero-padded decimal number (e.g., 07).\n\n\n\ndate_range = pd.date_range(start='2019-01-01', end='2019-05-31', freq='M')\ndf_monthly = pd.DataFrame()\n# Add the date range as a 'Month' column\ndf_monthly['Month'] = date_range\ndf_monthly['Observation'] = [50, 23, 34, 30, 25]\n\n# Display the resulting DataFrame\nprint(\"Monthly DataFrame:\")\nprint(df_monthly)\ndf_monthly.info()\nplot = (ggplot(df_monthly, aes(x='Month', y='Observation')) +\n        geom_line() +\n       labs(title='Line Plot of Observation Over Time') + \n       scale_x_datetime(breaks='1 month'))\nprint(plot)\n\nMonthly DataFrame:\n       Month  Observation\n0 2019-01-31           50\n1 2019-02-28           23\n2 2019-03-31           34\n3 2019-04-30           30\n4 2019-05-31           25\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        5 non-null      datetime64[ns]\n 1   Observation  5 non-null      int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 212.0 bytes\n\n\n\n\n\n\n\n\n\n\n1.1.4 Weekly\n\nstart_date = '2015-01-01'\nend_date = '2020-12-31'\n\nweekly_dates = pd.date_range(start=start_date, end=end_date, freq='W')\nprint(\"Weekly Dates:\")\nprint(weekly_dates)\n\nWeekly Dates:\nDatetimeIndex(['2015-01-04', '2015-01-11', '2015-01-18', '2015-01-25',\n               '2015-02-01', '2015-02-08', '2015-02-15', '2015-02-22',\n               '2015-03-01', '2015-03-08',\n               ...\n               '2020-10-25', '2020-11-01', '2020-11-08', '2020-11-15',\n               '2020-11-22', '2020-11-29', '2020-12-06', '2020-12-13',\n               '2020-12-20', '2020-12-27'],\n              dtype='datetime64[ns]', length=313, freq='W-SUN')\n\n\n\n\n\n1.1.5 Hourly\n\nstart_date = '2015-01-01 00:00:00'\nend_date = '2015-01-01 23:59:59'\n\nhourly_dates = pd.date_range(start=start_date, end=end_date, freq='H')\nprint(\"Hourly Dates:\")\nprint(hourly_dates)\n\nHourly Dates:\nDatetimeIndex(['2015-01-01 00:00:00', '2015-01-01 01:00:00',\n               '2015-01-01 02:00:00', '2015-01-01 03:00:00',\n               '2015-01-01 04:00:00', '2015-01-01 05:00:00',\n               '2015-01-01 06:00:00', '2015-01-01 07:00:00',\n               '2015-01-01 08:00:00', '2015-01-01 09:00:00',\n               '2015-01-01 10:00:00', '2015-01-01 11:00:00',\n               '2015-01-01 12:00:00', '2015-01-01 13:00:00',\n               '2015-01-01 14:00:00', '2015-01-01 15:00:00',\n               '2015-01-01 16:00:00', '2015-01-01 17:00:00',\n               '2015-01-01 18:00:00', '2015-01-01 19:00:00',\n               '2015-01-01 20:00:00', '2015-01-01 21:00:00',\n               '2015-01-01 22:00:00', '2015-01-01 23:00:00'],\n              dtype='datetime64[ns]', freq='H')\n\n\n{## Derive variables from the time column}"
  }
]