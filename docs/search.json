[
  {
    "objectID": "intro.html#creating-frequency-columns",
    "href": "intro.html#creating-frequency-columns",
    "title": "1  Time Series Wrangling",
    "section": "1.1 Creating Frequency Columns",
    "text": "1.1 Creating Frequency Columns\nInstall the required packages using the following commands. If you are using RStudio IDE type the commands on the Terminal according to the following format\n$ python -m pip install pandas\n$ python -m pip install plotnine\nOtherwise, you can use the following format\nimport sys\n\n!{sys.executable} -m pip install [package_name]\n\nSimilarly install and load the following libraries\n\nimport pandas as pd\nfrom pandas import *\nimport numpy as np\nimport plotnine as p9\nfrom plotnine import *\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime\nfrom datetime import *\n\n\n1.1.1 Annual Data\nFirst , I create a simple pandas data frame.\n\n# Creating a pandas DataFrame\ndata = {'Year': list(range(2015, 2020)),\n        'Observation': [123, 39, 78, 52, 110]}\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\nYear\nObservation\n\n\n\n\n0\n2015\n123\n\n\n1\n2016\n39\n\n\n2\n2017\n78\n\n\n3\n2018\n52\n\n\n4\n2019\n110\n\n\n\n\n\n\n\nNow, let’s check the data types of the variables in the above data frame.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   Year         5 non-null      int64\n 1   Observation  5 non-null      int64\ndtypes: int64(2)\nmemory usage: 212.0 bytes\n\n\n\n(ggplot(df, aes(\"Year\", \"Observation\"))\n + geom_point() + geom_line())\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\ndf['Year'] = pd.to_datetime(df['Year'], format='%Y')\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Year         5 non-null      datetime64[ns]\n 1   Observation  5 non-null      int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 212.0 bytes\n\n\n\n(ggplot(df, aes(\"Year\", \"Observation\"))\n + geom_point() + geom_line() + \n   scale_x_datetime(breaks='1 year',  date_labels='%Y'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\n1.1.2 Quarterly\n\nstart_date = '2015-01-01'\nend_date = '2020-12-31'\n\nquarterly_dates = pd.date_range(start=start_date, end=end_date, freq='Q')\nprint(\"Quarterly Dates:\")\nprint(quarterly_dates)\n\nQuarterly Dates:\nDatetimeIndex(['2015-03-31', '2015-06-30', '2015-09-30', '2015-12-31',\n               '2016-03-31', '2016-06-30', '2016-09-30', '2016-12-31',\n               '2017-03-31', '2017-06-30', '2017-09-30', '2017-12-31',\n               '2018-03-31', '2018-06-30', '2018-09-30', '2018-12-31',\n               '2019-03-31', '2019-06-30', '2019-09-30', '2019-12-31',\n               '2020-03-31', '2020-06-30', '2020-09-30', '2020-12-31'],\n              dtype='datetime64[ns]', freq='Q-DEC')\n\n\n\n\n\n\n\n\n\n1.1.3 Monthly data\nExample\n\n# Generate a date range for the desired time period\ndate_range = pd.date_range(start='2020-01-01', end='2021-12-31', freq='M')\nmonthly_observation_df = pd.DataFrame()\n# Add the date range and a randomly generated 'Observation' column\nmonthly_observation_df['Month'] = date_range\nnp.random.seed(42)  # Setting seed for reproducibility\nmonthly_observation_df['Observation'] = np.random.randint(24, 150, size=len(date_range))\n\n# Displaying the resulting DataFrame\nprint(\"Monthly Observation DataFrame:\")\nprint(monthly_observation_df)\nmonthly_observation_df.info()\n\nMonthly Observation DataFrame:\n        Month  Observation\n0  2020-01-31          126\n1  2020-02-29           75\n2  2020-03-31          116\n3  2020-04-30           38\n4  2020-05-31          130\n5  2020-06-30           95\n6  2020-07-31           84\n7  2020-08-31           44\n8  2020-09-30          126\n9  2020-10-31          145\n10 2020-11-30          106\n11 2020-12-31          110\n12 2021-01-31           98\n13 2021-02-28           98\n14 2021-03-31          111\n15 2021-04-30          140\n16 2021-05-31          123\n17 2021-06-30          127\n18 2021-07-31           47\n19 2021-08-31           26\n20 2021-09-30           45\n21 2021-10-31           76\n22 2021-11-30           25\n23 2021-12-31          111\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 24 entries, 0 to 23\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        24 non-null     datetime64[ns]\n 1   Observation  24 non-null     int32         \ndtypes: datetime64[ns](1), int32(1)\nmemory usage: 420.0 bytes\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        labs(title='Line Plot of Observation Over Time'))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%b %Y') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%Y-%m-%d') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\nplot = (ggplot(monthly_observation_df, aes(x='Month', y='Observation')) +\n        geom_line() +\n        geom_point() +\n        labs(title='Line Plot of Observation Over Time') + \n        scale_x_datetime(breaks='1 month',  date_labels='%m %Y') + \n        theme(axis_text_x=element_text(angle=90, hjust=1)))\n\nprint(plot)\n\n\n\n\n\n\n\n\n\n%Y: Year with century as a decimal number (e.g., 2023).\n%m: Month as a zero-padded decimal number (e.g., 01 for January).\n%d: Day of the month as a zero-padded decimal number (e.g., 07).\n\n\n\ndate_range = pd.date_range(start='2019-01-01', end='2019-05-31', freq='M')\ndf_monthly = pd.DataFrame()\n# Add the date range as a 'Month' column\ndf_monthly['Month'] = date_range\ndf_monthly['Observation'] = [50, 23, 34, 30, 25]\n\n# Display the resulting DataFrame\nprint(\"Monthly DataFrame:\")\nprint(df_monthly)\ndf_monthly.info()\nplot = (ggplot(df_monthly, aes(x='Month', y='Observation')) +\n        geom_line() +\n       labs(title='Line Plot of Observation Over Time') + \n       scale_x_datetime(breaks='1 month'))\nprint(plot)\n\nMonthly DataFrame:\n       Month  Observation\n0 2019-01-31           50\n1 2019-02-28           23\n2 2019-03-31           34\n3 2019-04-30           30\n4 2019-05-31           25\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        5 non-null      datetime64[ns]\n 1   Observation  5 non-null      int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 212.0 bytes\n\n\n\n\n\n\n\n\n\n\n1.1.4 Weekly\n\nstart_date = '2015-01-01'\nend_date = '2020-12-31'\n\nweekly_dates = pd.date_range(start=start_date, end=end_date, freq='W')\nprint(\"Weekly Dates:\")\nprint(weekly_dates)\n\nWeekly Dates:\nDatetimeIndex(['2015-01-04', '2015-01-11', '2015-01-18', '2015-01-25',\n               '2015-02-01', '2015-02-08', '2015-02-15', '2015-02-22',\n               '2015-03-01', '2015-03-08',\n               ...\n               '2020-10-25', '2020-11-01', '2020-11-08', '2020-11-15',\n               '2020-11-22', '2020-11-29', '2020-12-06', '2020-12-13',\n               '2020-12-20', '2020-12-27'],\n              dtype='datetime64[ns]', length=313, freq='W-SUN')\n\n\n\n\n\n1.1.5 Hourly\n\nstart_date = '2015-01-01 00:00:00'\nend_date = '2015-01-01 23:59:59'\n\nhourly_dates = pd.date_range(start=start_date, end=end_date, freq='H')\nprint(\"Hourly Dates:\")\nprint(hourly_dates)\n\nHourly Dates:\nDatetimeIndex(['2015-01-01 00:00:00', '2015-01-01 01:00:00',\n               '2015-01-01 02:00:00', '2015-01-01 03:00:00',\n               '2015-01-01 04:00:00', '2015-01-01 05:00:00',\n               '2015-01-01 06:00:00', '2015-01-01 07:00:00',\n               '2015-01-01 08:00:00', '2015-01-01 09:00:00',\n               '2015-01-01 10:00:00', '2015-01-01 11:00:00',\n               '2015-01-01 12:00:00', '2015-01-01 13:00:00',\n               '2015-01-01 14:00:00', '2015-01-01 15:00:00',\n               '2015-01-01 16:00:00', '2015-01-01 17:00:00',\n               '2015-01-01 18:00:00', '2015-01-01 19:00:00',\n               '2015-01-01 20:00:00', '2015-01-01 21:00:00',\n               '2015-01-01 22:00:00', '2015-01-01 23:00:00'],\n              dtype='datetime64[ns]', freq='H')\n\n\n{## Derive variables from the time column}"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lab Manual: DSA 554 3.0 Spatio-temporal Data Analysis",
    "section": "",
    "text": "Preface\nThis lab manual has beenwritten to serve as your companion in learning and mastering the time series analysis, spatial analysis and Spatio-temporal analysis with Python.\nThis book is written based on Quarto using the RStudio IDE. The content is reproducible. To reproduce the work use the following steps\n\nInstall R and RStudio\nInstall Python\nInstall jupyter using commander"
  },
  {
    "objectID": "chap2.html#import-csv-with-dates",
    "href": "chap2.html#import-csv-with-dates",
    "title": "2  Import data, Subsetting data based on dates, Down sampling and Upsampling",
    "section": "2.1 Import CSV with dates",
    "text": "2.1 Import CSV with dates\n\nairpassenger = pd.read_csv('data/AirPassengers.csv', parse_dates=[\"Month\"])\nairpassenger\nprint(airpassenger.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 144 entries, 0 to 143\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        144 non-null    datetime64[ns]\n 1   #Passengers  144 non-null    int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 2.4 KB\nNone\n\n\n\nggplot(airpassenger, aes(x='Month', y='#Passengers'))+geom_line()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nprint(airpassenger['Month'].min())\n\n1949-01-01 00:00:00"
  },
  {
    "objectID": "chap2.html#subseting",
    "href": "chap2.html#subseting",
    "title": "2  Import data, Subsetting data based on dates, Down sampling and Upsampling",
    "section": "2.2 Subseting",
    "text": "2.2 Subseting\n\nprint(airpassenger.iloc[-6:, :6])\n\n         Month  #Passengers\n138 1960-07-01          622\n139 1960-08-01          606\n140 1960-09-01          508\n141 1960-10-01          461\n142 1960-11-01          390\n143 1960-12-01          432\n\n\n\nprint(airpassenger.iloc[:6])\n\n       Month  #Passengers\n0 1949-01-01          112\n1 1949-02-01          118\n2 1949-03-01          132\n3 1949-04-01          129\n4 1949-05-01          121\n5 1949-06-01          135"
  },
  {
    "objectID": "chap2.html#subsetting-based-on-date-components",
    "href": "chap2.html#subsetting-based-on-date-components",
    "title": "2  Import data, Subsetting data based on dates, Down sampling and Upsampling",
    "section": "2.3 Subsetting based on Date Components",
    "text": "2.3 Subsetting based on Date Components\n\nprint(airpassenger.loc[(airpassenger.Month.dt.year == 1949) & (airpassenger.Month.dt.month == 8)])\n\n       Month  #Passengers\n7 1949-08-01          148\n\n\n\nprint(airpassenger.loc[(airpassenger.Month.dt.year == 1949) & (airpassenger.Month.dt.month &gt; 8)])\n\n        Month  #Passengers\n8  1949-09-01          136\n9  1949-10-01          119\n10 1949-11-01          104\n11 1949-12-01          118\n\n\n\nprint(airpassenger.loc[(airpassenger.Month.dt.year == 1949)])\n\n        Month  #Passengers\n0  1949-01-01          112\n1  1949-02-01          118\n2  1949-03-01          132\n3  1949-04-01          129\n4  1949-05-01          121\n5  1949-06-01          135\n6  1949-07-01          148\n7  1949-08-01          148\n8  1949-09-01          136\n9  1949-10-01          119\n10 1949-11-01          104\n11 1949-12-01          118"
  },
  {
    "objectID": "chap2.html#datetimeindex-pandas-time-series-index-by-time",
    "href": "chap2.html#datetimeindex-pandas-time-series-index-by-time",
    "title": "2  Import data, Subsetting data based on dates, Down sampling and Upsampling",
    "section": "2.4 DatetimeIndex: pandas time series index by time",
    "text": "2.4 DatetimeIndex: pandas time series index by time\nWhen working with datetime data, it is often required to set the datetime object to be the index of the dataframe.\n\nairpassenger.index = airpassenger['Month']\nprint(airpassenger.index)\n\nDatetimeIndex(['1949-01-01', '1949-02-01', '1949-03-01', '1949-04-01',\n               '1949-05-01', '1949-06-01', '1949-07-01', '1949-08-01',\n               '1949-09-01', '1949-10-01',\n               ...\n               '1960-03-01', '1960-04-01', '1960-05-01', '1960-06-01',\n               '1960-07-01', '1960-08-01', '1960-09-01', '1960-10-01',\n               '1960-11-01', '1960-12-01'],\n              dtype='datetime64[ns]', name='Month', length=144, freq=None)\n\n\n\nairpassenger\n\n\n\n\n\n\n\n\nMonth\n#Passengers\n\n\nMonth\n\n\n\n\n\n\n1949-01-01\n1949-01-01\n112\n\n\n1949-02-01\n1949-02-01\n118\n\n\n1949-03-01\n1949-03-01\n132\n\n\n1949-04-01\n1949-04-01\n129\n\n\n1949-05-01\n1949-05-01\n121\n\n\n...\n...\n...\n\n\n1960-08-01\n1960-08-01\n606\n\n\n1960-09-01\n1960-09-01\n508\n\n\n1960-10-01\n1960-10-01\n461\n\n\n1960-11-01\n1960-11-01\n390\n\n\n1960-12-01\n1960-12-01\n432\n\n\n\n\n144 rows × 2 columns\n\n\n\nNow we can directly subset rows using date components.\n\nprint(airpassenger.loc['1949'])\n\n                Month  #Passengers\nMonth                             \n1949-01-01 1949-01-01          112\n1949-02-01 1949-02-01          118\n1949-03-01 1949-03-01          132\n1949-04-01 1949-04-01          129\n1949-05-01 1949-05-01          121\n1949-06-01 1949-06-01          135\n1949-07-01 1949-07-01          148\n1949-08-01 1949-08-01          148\n1949-09-01 1949-09-01          136\n1949-10-01 1949-10-01          119\n1949-11-01 1949-11-01          104\n1949-12-01 1949-12-01          118\n\n\n\nprint(airpassenger.loc['1949-06'])\n\n                Month  #Passengers\nMonth                             \n1949-06-01 1949-06-01          135"
  },
  {
    "objectID": "chap2.html#downsampling",
    "href": "chap2.html#downsampling",
    "title": "2  Import data, Subsetting data based on dates, Down sampling and Upsampling",
    "section": "2.5 Downsampling",
    "text": "2.5 Downsampling\nDownsampling monthly values to yearly values\n\ndown = airpassenger.resample('Y').mean()\ndown\n\n\n\n\n\n\n\n\nMonth\n#Passengers\n\n\nMonth\n\n\n\n\n\n\n1949-12-31\n1949-06-16 12:00:00\n126.666667\n\n\n1950-12-31\n1950-06-16 12:00:00\n139.666667\n\n\n1951-12-31\n1951-06-16 12:00:00\n170.166667\n\n\n1952-12-31\n1952-06-16 08:00:00\n197.000000\n\n\n1953-12-31\n1953-06-16 12:00:00\n225.000000\n\n\n1954-12-31\n1954-06-16 12:00:00\n238.916667\n\n\n1955-12-31\n1955-06-16 12:00:00\n284.000000\n\n\n1956-12-31\n1956-06-16 08:00:00\n328.250000\n\n\n1957-12-31\n1957-06-16 12:00:00\n368.416667\n\n\n1958-12-31\n1958-06-16 12:00:00\n381.000000\n\n\n1959-12-31\n1959-06-16 12:00:00\n428.333333\n\n\n1960-12-31\n1960-06-16 08:00:00\n476.166667"
  },
  {
    "objectID": "chap2.html#upsampling",
    "href": "chap2.html#upsampling",
    "title": "2  Import data, Subsetting data based on dates, Down sampling and Upsampling",
    "section": "2.6 Upsampling",
    "text": "2.6 Upsampling\nUpsample monthly values to daily values\n\nup = airpassenger.resample('D').mean()\nup\n\n\n\n\n\n\n\n\nMonth\n#Passengers\n\n\nMonth\n\n\n\n\n\n\n1949-01-01\n1949-01-01\n112.0\n\n\n1949-01-02\nNaT\nNaN\n\n\n1949-01-03\nNaT\nNaN\n\n\n1949-01-04\nNaT\nNaN\n\n\n1949-01-05\nNaT\nNaN\n\n\n...\n...\n...\n\n\n1960-11-27\nNaT\nNaN\n\n\n1960-11-28\nNaT\nNaN\n\n\n1960-11-29\nNaT\nNaN\n\n\n1960-11-30\nNaT\nNaN\n\n\n1960-12-01\n1960-12-01\n432.0\n\n\n\n\n4353 rows × 2 columns"
  },
  {
    "objectID": "chap3.html#task-1",
    "href": "chap3.html#task-1",
    "title": "3  Time Series Graphics",
    "section": "3.1 Task 1",
    "text": "3.1 Task 1\n\nGet data from tsibbledata package in R and write it as a csv file\n\nFollowing is an R code.\n#install.packages(\"tsibbledata\")\nlibrary(tsibbledata)\nlibrary(tidyverse)\ndata(olympic_running)\nwrite_csv(olympic_running, file=\"data/olympic_running.csv\")\n\nRead data\n\n\nolympic_running = pd.read_csv('data/olympic_running.csv', parse_dates=['Year'])\nolympic_running\n\n\n\n\n\n\n\n\nYear\nLength\nSex\nTime\n\n\n\n\n0\n1896-01-01\n100\nmen\n12.00\n\n\n1\n1900-01-01\n100\nmen\n11.00\n\n\n2\n1904-01-01\n100\nmen\n11.00\n\n\n3\n1908-01-01\n100\nmen\n10.80\n\n\n4\n1912-01-01\n100\nmen\n10.80\n\n\n...\n...\n...\n...\n...\n\n\n307\n2000-01-01\n10000\nwomen\n1817.49\n\n\n308\n2004-01-01\n10000\nwomen\n1824.36\n\n\n309\n2008-01-01\n10000\nwomen\n1794.66\n\n\n310\n2012-01-01\n10000\nwomen\n1820.75\n\n\n311\n2016-01-01\n10000\nwomen\n1757.45\n\n\n\n\n312 rows × 4 columns\n\n\n\nTask: Visualise data in a meaningful way."
  },
  {
    "objectID": "chap3.html#task-2",
    "href": "chap3.html#task-2",
    "title": "3  Time Series Graphics",
    "section": "3.2 Task 2",
    "text": "3.2 Task 2\nObtain vic_elec data from the tsibbledata package in R and visualize.\nHelp\n\nimport pandas as pd\nvic_elec = pd.read_csv('data/vic_elec.csv', parse_dates=['Time'])\nvic_elec\n\n\n\n\n\n\n\n\nTime\nDemand\nTemperature\nDate\nHoliday\n\n\n\n\n0\n2011-12-31 13:00:00+00:00\n4382.825174\n21.40\n2012-01-01\nTrue\n\n\n1\n2011-12-31 13:30:00+00:00\n4263.365526\n21.05\n2012-01-01\nTrue\n\n\n2\n2011-12-31 14:00:00+00:00\n4048.966046\n20.70\n2012-01-01\nTrue\n\n\n3\n2011-12-31 14:30:00+00:00\n3877.563330\n20.55\n2012-01-01\nTrue\n\n\n4\n2011-12-31 15:00:00+00:00\n4036.229746\n20.40\n2012-01-01\nTrue\n\n\n...\n...\n...\n...\n...\n...\n\n\n52603\n2014-12-31 10:30:00+00:00\n3873.448714\n19.00\n2014-12-31\nFalse\n\n\n52604\n2014-12-31 11:00:00+00:00\n3791.637322\n18.50\n2014-12-31\nFalse\n\n\n52605\n2014-12-31 11:30:00+00:00\n3724.835666\n17.70\n2014-12-31\nFalse\n\n\n52606\n2014-12-31 12:00:00+00:00\n3761.886854\n17.30\n2014-12-31\nFalse\n\n\n52607\n2014-12-31 12:30:00+00:00\n3809.414586\n17.10\n2014-12-31\nFalse\n\n\n\n\n52608 rows × 5 columns\n\n\n\n\nvic_elec.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 52608 entries, 0 to 52607\nData columns (total 5 columns):\n #   Column       Non-Null Count  Dtype              \n---  ------       --------------  -----              \n 0   Time         52608 non-null  datetime64[ns, UTC]\n 1   Demand       52608 non-null  float64            \n 2   Temperature  52608 non-null  float64            \n 3   Date         52608 non-null  object             \n 4   Holiday      52608 non-null  bool               \ndtypes: bool(1), datetime64[ns, UTC](1), float64(2), object(1)\nmemory usage: 1.7+ MB"
  },
  {
    "objectID": "chap4.html#method-1-plotting",
    "href": "chap4.html#method-1-plotting",
    "title": "4  Time Series Decomposition",
    "section": "4.1 Method 1: Plotting",
    "text": "4.1 Method 1: Plotting\n\n# Plot the original time series, trend, seasonal, and remainder components\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(10, 8), sharex=True)\n\nax1.plot(air_passengers, label='Original')\nax1.legend()\n\nax2.plot(result.trend, label='Trend', color='orange')\nax2.legend()\n\nax3.plot(result.seasonal, label='Seasonal', color='green')\nax3.legend()\n\nax4.plot(result.resid, label='Residual', color='red')\nax4.legend()\n\nplt.suptitle('STL Decomposition of AirPassengers Dataset')\nplt.show()"
  },
  {
    "objectID": "chap4.html#method-2-plotting-using-plotnine",
    "href": "chap4.html#method-2-plotting-using-plotnine",
    "title": "4  Time Series Decomposition",
    "section": "4.2 Method 2: Plotting using plotnine",
    "text": "4.2 Method 2: Plotting using plotnine\n\nfrom plotnine import ggplot, aes, geom_line, facet_wrap, ggtitle\n# Create a DataFrame for visualization\ndf_visualization = pd.DataFrame({\n    'Date': air_passengers.index,\n    'Original': air_passengers['#Passengers'],\n    'Trend': result.trend,\n    'Seasonal': result.seasonal,\n    'Residual': result.resid\n})\ndf_visualization\n\n\n\n\n\n\n\n\nDate\nOriginal\nTrend\nSeasonal\nResidual\n\n\nMonth\n\n\n\n\n\n\n\n\n\n1949-01-01\n1949-01-01\n112\n121.463327\n-9.157113\n-0.306215\n\n\n1949-02-01\n1949-02-01\n118\n122.392507\n0.961357\n-5.353864\n\n\n1949-03-01\n1949-03-01\n132\n123.284151\n12.919571\n-4.203722\n\n\n1949-04-01\n1949-04-01\n129\n124.139983\n4.042554\n0.817463\n\n\n1949-05-01\n1949-05-01\n121\n124.967180\n-3.196646\n-0.770534\n\n\n...\n...\n...\n...\n...\n...\n\n\n1960-08-01\n1960-08-01\n606\n481.142084\n132.866128\n-8.008212\n\n\n1960-09-01\n1960-09-01\n508\n484.574794\n25.826563\n-2.401357\n\n\n1960-10-01\n1960-10-01\n461\n487.984483\n-33.766745\n6.782262\n\n\n1960-11-01\n1960-11-01\n390\n491.372961\n-97.319814\n-4.053148\n\n\n1960-12-01\n1960-12-01\n432\n494.738728\n-60.351183\n-2.387545\n\n\n\n\n144 rows × 5 columns\n\n\n\n\n# Melt the DataFrame for easier plotting\ndf_melted = df_visualization.melt(id_vars='Date', var_name='Component', value_name='Value')\ndf_melted\n\n\n\n\n\n\n\n\nDate\nComponent\nValue\n\n\n\n\n0\n1949-01-01\nOriginal\n112.000000\n\n\n1\n1949-02-01\nOriginal\n118.000000\n\n\n2\n1949-03-01\nOriginal\n132.000000\n\n\n3\n1949-04-01\nOriginal\n129.000000\n\n\n4\n1949-05-01\nOriginal\n121.000000\n\n\n...\n...\n...\n...\n\n\n571\n1960-08-01\nResidual\n-8.008212\n\n\n572\n1960-09-01\nResidual\n-2.401357\n\n\n573\n1960-10-01\nResidual\n6.782262\n\n\n574\n1960-11-01\nResidual\n-4.053148\n\n\n575\n1960-12-01\nResidual\n-2.387545\n\n\n\n\n576 rows × 3 columns\n\n\n\n\n# Plot using plotnine\nplot = (\n    ggplot(df_melted, aes(x='Date', y='Value', color='Component')) +\n    geom_line() +\n    facet_wrap('~Component', scales='free_y') +\n    ggtitle('STL Decomposition of AirPassengers Dataset')\n)\n\n# Display the plot\nprint(plot)\n\n\n\n\n\n\n\n\n# Plot using plotnine\nplot = (\n    ggplot(df_melted, aes(x='Date', y='Value', color='Component')) +\n    geom_line() +\n    facet_wrap('~Component', scales='free_y', ncol=1) +\n    ggtitle('STL Decomposition of AirPassengers Dataset')\n)\n\n# Display the plot\nprint(plot)\n\n\n\n\n\n\n\nTask: Take hourly series and perform STL decomposition."
  },
  {
    "objectID": "chap7.html",
    "href": "chap7.html",
    "title": "7  Spatial Visualization",
    "section": "",
    "text": "import geopandas as gpd"
  },
  {
    "objectID": "chap5.html",
    "href": "chap5.html",
    "title": "5  Time Series Forecasting",
    "section": "",
    "text": "Please go to course web."
  },
  {
    "objectID": "chap6.html",
    "href": "chap6.html",
    "title": "6  Time Series Features",
    "section": "",
    "text": "Please go to the course web."
  },
  {
    "objectID": "chap7.html#vector-files",
    "href": "chap7.html#vector-files",
    "title": "7  Spatial Visualization",
    "section": "7.1 Vector files",
    "text": "7.1 Vector files\n\nShapefiles\n\n\n.shp file contains shape geometry\n.dbf file holds attributes for each geometry\n.shx file or shape index file helps link the attributes to the shapes\n\n\nGeoJSON: Unlike shapefiles, GeoJSON is a single file\n\n\nchicago = gpd.read_file(geodatasets.get_path(\"geoda.chicago_commpop\"))\nchicago\nchicago.crs\n\n&lt;Geographic 2D CRS: EPSG:4326&gt;\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\ngroceries = gpd.read_file(geodatasets.get_path(\"geoda.groceries\"))\ngroceries\n\n\n\n\n\n\n\n\nOBJECTID\nYcoord\nXcoord\nStatus\nAddress\nChain\nCategory\ngeometry\n\n\n\n\n0\n16\n41.973266\n-87.657073\nOPEN\n1051 W ARGYLE ST, CHICAGO, IL. 60640\nVIET HOA PLAZA\nNone\nMULTIPOINT (1168268.672 1933554.350)\n\n\n1\n18\n41.696367\n-87.681315\nOPEN\n10800 S WESTERN AVE, CHICAGO, IL. 60643-3226\nCOUNTY FAIR FOODS\nNone\nMULTIPOINT (1162302.618 1832900.224)\n\n\n2\n22\n41.868634\n-87.638638\nOPEN\n1101 S CANAL ST, CHICAGO, IL. 60607-4932\nWHOLE FOODS MARKET\nNone\nMULTIPOINT (1173317.042 1895425.426)\n\n\n3\n23\n41.877590\n-87.654953\nOPEN\n1101 W JACKSON BLVD, CHICAGO, IL. 60607-2905\nTARGET/SUPER\nnew\nMULTIPOINT (1168996.475 1898801.406)\n\n\n4\n27\n41.737696\n-87.625795\nOPEN\n112 W 87TH ST, CHICAGO, IL. 60620-1318\nFOOD 4 LESS\nNone\nMULTIPOINT (1176991.989 1847262.423)\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n143\n585\n41.880834\n-87.647729\nChicago-West Loop\n40 S Halsted St, Chicago, IL 60661\nMariano's\nNone\nMULTIPOINT (1171065.063 1899839.376)\n\n\n144\n586\n41.920842\n-87.669112\nNewLocation\n2112 N Ashland Ave, Chicago IL 60614\nMariano's\nNone\nMULTIPOINT (1165217.798 1914159.975)\n\n\n145\n587\n41.835930\n-87.664034\nChicago-Bridgeport\n3145 S Ashland Ave, Chicago, IL 60608\nMariano's\nNone\nMULTIPOINT (1166186.713 1883581.309)\n\n\n146\n588\n41.859370\n-87.630062\nChicago-South Loop\n1615 S Clark St, Chicago, IL 60616\nMariano's\nNone\nMULTIPOINT (1175778.816 1892214.445)\n\n\n147\n600\n41.696869\n-87.599163\nNew Location\n10900 S Doty Ave, Chicago IL 60628\nPullman Walmart Center\nNone\nMULTIPOINT (1185013.734 1832012.356)\n\n\n\n\n148 rows × 8 columns\n\n\n\n\nchicago.plot();\n\n\n\n\n\nchicago.plot(column=\"POP2010\", legend=True);\n\n\n\n\n\nchicago.boundary.plot();"
  },
  {
    "objectID": "chap7.html#reading-external-data",
    "href": "chap7.html#reading-external-data",
    "title": "7  Spatial Visualization",
    "section": "7.6 Reading external data",
    "text": "7.6 Reading external data\n\nurl = 'https://raw.githubusercontent.com/jcanalesluna/bcn-geodata/master/districtes/districtes.geojson'\ndistricts = gpd.read_file(url)\ndistricts\ndistricts.crs\n\n&lt;Geographic 2D CRS: EPSG:4326&gt;\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\ndistricts.plot();"
  },
  {
    "objectID": "chap7.html#centroid",
    "href": "chap7.html#centroid",
    "title": "7  Spatial Visualization",
    "section": "7.2 Centroid",
    "text": "7.2 Centroid\nCentroid: center point of a geometry.\n\nchicago['centroid']=chicago.centroid\nchicago\n\nC:\\Users\\DELL\\AppData\\Local\\Temp\\ipykernel_30056\\3913322276.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  chicago['centroid']=chicago.centroid\n\n\n\n\n\n\n\n\n\ncommunity\nNID\nPOP2010\nPOP2000\nPOPCH\nPOPPERCH\npopplus\npopneg\ngeometry\ncentroid\n\n\n\n\n0\nDOUGLAS\n35\n18238\n26470\n-8232\n-31.099358\n0\n1\nMULTIPOLYGON (((-87.60914 41.84469, -87.60915 ...\nPOINT (-87.61868 41.83512)\n\n\n1\nOAKLAND\n36\n5918\n6110\n-192\n-3.142390\n0\n1\nMULTIPOLYGON (((-87.59215 41.81693, -87.59231 ...\nPOINT (-87.60322 41.82375)\n\n\n2\nFULLER PARK\n37\n2876\n3420\n-544\n-15.906433\n0\n1\nMULTIPOLYGON (((-87.62880 41.80189, -87.62879 ...\nPOINT (-87.63242 41.80909)\n\n\n3\nGRAND BOULEVARD\n38\n21929\n28006\n-6077\n-21.698922\n0\n1\nMULTIPOLYGON (((-87.60671 41.81681, -87.60670 ...\nPOINT (-87.61786 41.81295)\n\n\n4\nKENWOOD\n39\n17841\n18363\n-522\n-2.842673\n0\n1\nMULTIPOLYGON (((-87.59215 41.81693, -87.59215 ...\nPOINT (-87.59618 41.80892)\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n72\nMOUNT GREENWOOD\n74\n19093\n18820\n273\n1.450584\n1\n0\nMULTIPOLYGON (((-87.69646 41.70714, -87.69644 ...\nPOINT (-87.71319 41.69488)\n\n\n73\nMORGAN PARK\n75\n22544\n25226\n-2682\n-10.631888\n0\n1\nMULTIPOLYGON (((-87.64215 41.68508, -87.64249 ...\nPOINT (-87.66905 41.68973)\n\n\n74\nOHARE\n76\n12756\n11956\n800\n6.691201\n1\n0\nMULTIPOLYGON (((-87.83658 41.98640, -87.83658 ...\nPOINT (-87.89370 41.97568)\n\n\n75\nEDGEWATER\n77\n56521\n62198\n-5677\n-9.127303\n0\n1\nMULTIPOLYGON (((-87.65456 41.99817, -87.65456 ...\nPOINT (-87.66342 41.98671)\n\n\n76\nEDISON PARK\n9\n11187\n11259\n-72\n-0.639488\n0\n1\nMULTIPOLYGON (((-87.80676 42.00084, -87.80676 ...\nPOINT (-87.81378 42.00761)\n\n\n\n\n77 rows × 10 columns"
  },
  {
    "objectID": "chap7.html#area",
    "href": "chap7.html#area",
    "title": "7  Spatial Visualization",
    "section": "7.3 Area",
    "text": "7.3 Area\n\nchicago['area'] = chicago.area\nchicago\n\nC:\\Users\\DELL\\AppData\\Local\\Temp\\ipykernel_30056\\1530745536.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  chicago['area'] = chicago.area\n\n\n\n\n\n\n\n\n\ncommunity\nNID\nPOP2010\nPOP2000\nPOPCH\nPOPPERCH\npopplus\npopneg\ngeometry\ncentroid\narea\n\n\n\n\n0\nDOUGLAS\n35\n18238\n26470\n-8232\n-31.099358\n0\n1\nMULTIPOLYGON (((-87.60914 41.84469, -87.60915 ...\nPOINT (-87.61868 41.83512)\n0.000463\n\n\n1\nOAKLAND\n36\n5918\n6110\n-192\n-3.142390\n0\n1\nMULTIPOLYGON (((-87.59215 41.81693, -87.59231 ...\nPOINT (-87.60322 41.82375)\n0.000170\n\n\n2\nFULLER PARK\n37\n2876\n3420\n-544\n-15.906433\n0\n1\nMULTIPOLYGON (((-87.62880 41.80189, -87.62879 ...\nPOINT (-87.63242 41.80909)\n0.000200\n\n\n3\nGRAND BOULEVARD\n38\n21929\n28006\n-6077\n-21.698922\n0\n1\nMULTIPOLYGON (((-87.60671 41.81681, -87.60670 ...\nPOINT (-87.61786 41.81295)\n0.000488\n\n\n4\nKENWOOD\n39\n17841\n18363\n-522\n-2.842673\n0\n1\nMULTIPOLYGON (((-87.59215 41.81693, -87.59215 ...\nPOINT (-87.59618 41.80892)\n0.000293\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n72\nMOUNT GREENWOOD\n74\n19093\n18820\n273\n1.450584\n1\n0\nMULTIPOLYGON (((-87.69646 41.70714, -87.69644 ...\nPOINT (-87.71319 41.69488)\n0.000759\n\n\n73\nMORGAN PARK\n75\n22544\n25226\n-2682\n-10.631888\n0\n1\nMULTIPOLYGON (((-87.64215 41.68508, -87.64249 ...\nPOINT (-87.66905 41.68973)\n0.000923\n\n\n74\nOHARE\n76\n12756\n11956\n800\n6.691201\n1\n0\nMULTIPOLYGON (((-87.83658 41.98640, -87.83658 ...\nPOINT (-87.89370 41.97568)\n0.003752\n\n\n75\nEDGEWATER\n77\n56521\n62198\n-5677\n-9.127303\n0\n1\nMULTIPOLYGON (((-87.65456 41.99817, -87.65456 ...\nPOINT (-87.66342 41.98671)\n0.000489\n\n\n76\nEDISON PARK\n9\n11187\n11259\n-72\n-0.639488\n0\n1\nMULTIPOLYGON (((-87.80676 42.00084, -87.80676 ...\nPOINT (-87.81378 42.00761)\n0.000319\n\n\n\n\n77 rows × 11 columns"
  },
  {
    "objectID": "chap7.html#boundary",
    "href": "chap7.html#boundary",
    "title": "7  Spatial Visualization",
    "section": "7.4 Boundary",
    "text": "7.4 Boundary\n\nchicago['boundary']=chicago.boundary\nchicago\n\n\n\n\n\n\n\n\ncommunity\nNID\nPOP2010\nPOP2000\nPOPCH\nPOPPERCH\npopplus\npopneg\ngeometry\ncentroid\narea\nboundary\n\n\n\n\n0\nDOUGLAS\n35\n18238\n26470\n-8232\n-31.099358\n0\n1\nMULTIPOLYGON (((-87.60914 41.84469, -87.60915 ...\nPOINT (-87.61868 41.83512)\n0.000463\nMULTILINESTRING ((-87.60914 41.84469, -87.6091...\n\n\n1\nOAKLAND\n36\n5918\n6110\n-192\n-3.142390\n0\n1\nMULTIPOLYGON (((-87.59215 41.81693, -87.59231 ...\nPOINT (-87.60322 41.82375)\n0.000170\nMULTILINESTRING ((-87.59215 41.81693, -87.5923...\n\n\n2\nFULLER PARK\n37\n2876\n3420\n-544\n-15.906433\n0\n1\nMULTIPOLYGON (((-87.62880 41.80189, -87.62879 ...\nPOINT (-87.63242 41.80909)\n0.000200\nMULTILINESTRING ((-87.62880 41.80189, -87.6287...\n\n\n3\nGRAND BOULEVARD\n38\n21929\n28006\n-6077\n-21.698922\n0\n1\nMULTIPOLYGON (((-87.60671 41.81681, -87.60670 ...\nPOINT (-87.61786 41.81295)\n0.000488\nMULTILINESTRING ((-87.60671 41.81681, -87.6067...\n\n\n4\nKENWOOD\n39\n17841\n18363\n-522\n-2.842673\n0\n1\nMULTIPOLYGON (((-87.59215 41.81693, -87.59215 ...\nPOINT (-87.59618 41.80892)\n0.000293\nMULTILINESTRING ((-87.59215 41.81693, -87.5921...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n72\nMOUNT GREENWOOD\n74\n19093\n18820\n273\n1.450584\n1\n0\nMULTIPOLYGON (((-87.69646 41.70714, -87.69644 ...\nPOINT (-87.71319 41.69488)\n0.000759\nMULTILINESTRING ((-87.69646 41.70714, -87.6964...\n\n\n73\nMORGAN PARK\n75\n22544\n25226\n-2682\n-10.631888\n0\n1\nMULTIPOLYGON (((-87.64215 41.68508, -87.64249 ...\nPOINT (-87.66905 41.68973)\n0.000923\nMULTILINESTRING ((-87.64215 41.68508, -87.6424...\n\n\n74\nOHARE\n76\n12756\n11956\n800\n6.691201\n1\n0\nMULTIPOLYGON (((-87.83658 41.98640, -87.83658 ...\nPOINT (-87.89370 41.97568)\n0.003752\nMULTILINESTRING ((-87.83658 41.98640, -87.8365...\n\n\n75\nEDGEWATER\n77\n56521\n62198\n-5677\n-9.127303\n0\n1\nMULTIPOLYGON (((-87.65456 41.99817, -87.65456 ...\nPOINT (-87.66342 41.98671)\n0.000489\nMULTILINESTRING ((-87.65456 41.99817, -87.6545...\n\n\n76\nEDISON PARK\n9\n11187\n11259\n-72\n-0.639488\n0\n1\nMULTIPOLYGON (((-87.80676 42.00084, -87.80676 ...\nPOINT (-87.81378 42.00761)\n0.000319\nMULTILINESTRING ((-87.80676 42.00084, -87.8067...\n\n\n\n\n77 rows × 12 columns"
  },
  {
    "objectID": "chap7.html#add-points",
    "href": "chap7.html#add-points",
    "title": "7  Spatial Visualization",
    "section": "7.5 Add points",
    "text": "7.5 Add points\n\ngroceries.plot(marker='*', color='green', markersize=5);\n\n\n\n\n\ngroceries = groceries.to_crs(chicago.crs)\n\n\nbase = chicago.plot(color='white', edgecolor='black')\nbase\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nbase = chicago.plot(color='white', edgecolor='black')\ngroceries.plot(ax=base, marker='o', color='red', markersize=3);"
  }
]